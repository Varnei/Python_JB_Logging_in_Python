type: edu
files:
- name: private_logger.py
  visible: true
  placeholders:
  - offset: 726
    length: 32
    placeholder_text: first class logger specific name
    initial_state:
      length: 32
      offset: 726
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: .first_class
  - offset: 765
    length: 30
    placeholder_text: set the logging level to DEBUG
    initial_state:
      length: 30
      offset: 765
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: first_logger.setLevel(logging.DEBUG)
  text: |+
    import logging

    logger = logging.getLogger(__name__)

    class FirstClass():
        def __init__(self):
            self.log = logging.getLogger(__name__ + '.first_class')

        def do_something(self):
            self.log.debug('FirstClass do_something() called')


    class SecondClass():
        def __init__(self):
            self.log = logging.getLogger(__name__ + '.second_class')

        def do_something(self):
            self.log.debug('SecondClass do_something() called')

    if __name__ == '__main__':
        logging.basicConfig(level=logging.WARNING)

        logger.debug('module scope log output')

        first = FirstClass()
        first.do_something()

        second = SecondClass()
        second.do_something()

        first_logger = logging.getLogger(__name__ + 'first class logger specific name')
        set the logging level to DEBUG
        first.do_something()
        second.do_something()


  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0]
        if placeholder == ".first_class":
            passed()
        else:
            failed()

        placeholder = placeholders[1]
        if placeholder == "first_logger.setLevel(logging.DEBUG)":
            passed()
        else:
            failed()

    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
