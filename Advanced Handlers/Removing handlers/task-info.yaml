type: edu
files:
- name: remove_handler.py
  visible: true
  placeholders:
  - offset: 583
    length: 21
    placeholder_text: enter the logger name
    initial_state:
      length: 21
      offset: 583
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '''A.B'''
  - offset: 727
    length: 45
    placeholder_text: insert code to remove handler from A.B logger
    initial_state:
      length: 45
      offset: 727
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: b_log.removeHandler(handler)
  text: |
    import logging

    def setup_loggers():
        stream_handler = logging.StreamHandler()
        fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        stream_handler.setFormatter(fmt)

        root = logging.getLogger()
        root.addHandler(stream_handler)
        #root.setLevel(logging.DEBUG)

        b_log = logging.getLogger('A.B')
        b_log.addHandler(stream_handler)


    if __name__ == '__main__':
        setup_loggers()

        c_log = logging.getLogger('A.B.C')
        c_log.warn('This message should be output once to console (but is output twice instead)')

        b_log = logging.getLogger(enter the logger name)

        # Remove all handlers attached to logger
        while len(b_log.handlers):
            handler = b_log.handlers[0]
            insert code to remove handler from A.B logger

        c_log.warn('This message should be output once to console')
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0].replace('"', "'")
        if placeholder == "'A.B'":
            passed()
        else:
            failed()
        placeholder = placeholders[1]
        if placeholder == "b_log.removeHandler(handler)":
            passed()
        else:
            failed()


    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
