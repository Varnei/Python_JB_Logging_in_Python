type: edu
files:
- name: sanitize_filter.py
  visible: true
  placeholders:
  - offset: 448
    length: 35
    placeholder_text: insert the appropriate return value
    initial_state:
      length: 35
      offset: 448
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 2
  - offset: 635
    length: 40
    placeholder_text: add the filter object to the root logger
    initial_state:
      length: 40
      offset: 635
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: root.addFilter(sanitize_filter)
  text: |
    import logging
    import re

    class SanitizeSSNFilter(logging.Filter):
        def filter(self, record):
            def replace_ssn(value):
                return re.sub('\d\d\d-\d\d-\d\d\d\d', 'XXX-XX-XXXX', value)

            record.msg = replace_ssn(record.msg)
            if record.args:
                newargs = [replace_ssn(arg) if isinstance(arg, str)
                           else arg for arg in record.args]
                record.args = tuple(newargs)

            return insert the appropriate return value

    if __name__ == '__main__':
        logging.basicConfig(level=logging.DEBUG)

        sanitize_filter = SanitizeSSNFilter()
        root = logging.getLogger()
        add the filter object to the root logger

        root.debug('Nothing filtered here; user_id=%s', '100')
        root.debug('Log message containing a SSN=000-01-1000')
        root.warn('Log message containing a SSN=%s', '000-01-1001')
        root.debug('Log message containing a SSN=%s' % '000-01-1100')
        root.info('Log event: user_id=%s, SSN=%s, status=%d, result=%s', '100', '000-01-1100', 2, True)
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0]
        try:
            int_value = int(placeholder)
            if int_value > 0:
                passed()
            else:
                failed()

        except ValueError:
            if placeholder == 'True':
                passed()
            else:
                failed()

        placeholder = placeholders[1]
        if placeholder == 'root.addFilter(sanitize_filter)':
            passed()
        else:
            failed()

    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
