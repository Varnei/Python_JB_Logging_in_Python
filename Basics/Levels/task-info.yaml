type: edu
files:
- name: levels.py
  visible: true
  placeholders:
  - offset: 348
    length: 5
    placeholder_text: debug
    initial_state:
      length: 5
      offset: 348
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: info
  - offset: 413
    length: 34
    placeholder_text: write_a_warning_message_to_logging
    initial_state:
      length: 34
      offset: 413
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: logging.warning("Term greater than 50 years")
  text: |
    from __future__ import print_function
    import math
    import logging

    def get_current_rate(years):
        logging.debug('Fetching current interest rate for %d years' % years)
        rate = 7.5   # Stub external service call
        logging.debug('Service returned interest rate %f' % rate)
        return rate

    def get_monthly_payment(principal, years):
        logging.debug('Calling mortgage calculator')

        if years > 50:
            write_a_warning_message_to_logging

        mon_rate = get_current_rate(years)/1200
        payments = years * 12
        logging.debug('Number of monthly payments %d' % payments)
        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))

        logging.debug('Calculated result is %f' % result)
        logging.debug('Leaving mortgage calculator')
        return result

    if __name__ == '__main__':
        logging.basicConfig(level=logging.DEBUG)
        payment = get_monthly_payment(100000, 30)
        print('Monthly payment is %f' % payment)
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0]
        if placeholder == "info":
            passed()
        else:
            failed('Sorry, that is not correct. Please use the info() method.')

        if placeholders[1].startswith('logging.warn'):
            passed()
        else:
            failed('Sorry, that is not correct. Place use the warn() method.')

    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
