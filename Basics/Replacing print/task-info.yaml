type: edu
files:
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        for placeholder in placeholders:
            if placeholder != "logging.debug":
                failed()
                return

        passed()

    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
- name: replacing_print.py
  visible: true
  placeholders:
  - offset: 99
    length: 13
    placeholder_text: print
    initial_state:
      length: 5
      offset: 99
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logging.debug
  - offset: 218
    length: 13
    placeholder_text: print
    initial_state:
      length: 5
      offset: 210
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logging.debug
  - offset: 340
    length: 13
    placeholder_text: print
    initial_state:
      length: 5
      offset: 324
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logging.debug
  - offset: 460
    length: 13
    placeholder_text: print
    initial_state:
      length: 5
      offset: 436
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logging.debug
  - offset: 597
    length: 13
    placeholder_text: print
    initial_state:
      length: 5
      offset: 565
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logging.debug
  - offset: 651
    length: 13
    placeholder_text: print
    initial_state:
      length: 5
      offset: 611
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: logging.debug
  text: |
    from __future__ import print_function
    import math
    import logging

    def get_current_rate(years):
        print('Fetching current interest rate for %d years' % years)
        rate = 7.5   # Stub external service call
        print('Service returned interest rate %f' % rate)
        return rate

    def get_monthly_payment(principal, years):
        print('Calling mortgage calculator')

        mon_rate = get_current_rate(years)/1200
        payments = years * 12
        print('Number of monthly payments %d' % payments)
        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))

        print('Calculated result is %f' % result)
        print('Leaving mortgage calculator')
        return result

    if __name__ == '__main__':
        payment = get_monthly_payment(100000, 30)
        print('Monthly payment is %f' % payment)
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 31 Jul 2021 07:07:55 UTC
record: -1
