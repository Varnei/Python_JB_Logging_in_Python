type: edu
files:
- name: inject_filter.py
  visible: true
  placeholders:
  - offset: 171
    length: 51
    placeholder_text: enter the name of the method used to filter records
    initial_state:
      length: 51
      offset: 171
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: filter
  - offset: 309
    length: 60
    placeholder_text: enter the return value to always allow records to be handled
    initial_state:
      length: 60
      offset: 309
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: "True"
  text: |+
    import logging
    import time
    import random
    import logging.config
    import threading

    class LogUserInjector(logging.Filter):
        thread_local_data = threading.local()

        def enter the name of the method used to filter records(self, record):
            record.user_id = self.thread_local_data.user_id
            return enter the return value to always allow records to be handled

        @classmethod
        def set_userid(cls, user_id):
            cls.thread_local_data.user_id = user_id


    def simulate_user(user_id):
        LogUserInjector.set_userid(user_id)

        logging.debug('user logged_in')
        time.sleep(random.random())
        logging.debug('user performed some activity')
        time.sleep(random.random())
        logging.debug('user logged_out')
        time.sleep(random.random())


    if __name__ == '__main__':

        log_config = {
            'version': 1,
            'formatters': {
                'with_uid': {
                    'format': '%(levelname)s - %(asctime)s - %(thread)s UID=%(user_id)d - %(message)s'
                }
            },
            'handlers': {
                'stderr': {
                    'class': 'logging.StreamHandler',
                    'formatter': 'with_uid',
                    'filters': ['uid']
                }
            },
            'filters': {
                'uid': {
                    '()': LogUserInjector
                }
            },
            'root': {
                'handlers': ['stderr'],
                'level': 'DEBUG'
            }
        }

        logging.config.dictConfig(log_config)

        threads = []
        for user_id in [1, 5, 2, 3]:
            thread = threading.Thread(target=simulate_user, args=(user_id,))
            thread.start()

        for thread in threads:
            thread.join()

  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        answers = [
            ["filter"],
            ["True", "1"]
        ]
        check_answers(placeholders, answers)


    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
