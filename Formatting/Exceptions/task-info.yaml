type: edu
files:
- name: log_exception.py
  visible: true
  placeholders:
  - offset: 825
    length: 4
    placeholder_text: pass
    initial_state:
      length: 4
      offset: 825
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: logger.exception('Exception occured')
  text: |
    from __future__ import print_function
    import math
    import logging

    logger = logging.getLogger('mortgage')

    def get_current_rate(years):
        logger.debug('Fetching current interest rate for %d years' % years)
        rate = 5.3   # Stub external service call
        logger.debug('Service returned interest rate %f' % rate)
        return rate

    def get_monthly_payment(principal, years):
        logger.info('Calling mortgage calculator')
        result = None
        try:
            if years > 50:
                logger.warn('Term greater than 50 years')

            mon_rate = get_current_rate(years)/1200
            payments = years * 12
            logger.debug('Number of monthly payments %d' % payments)
            result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))

            logger.debug('Calculated result is %f' % result)
        except:
            pass
        logging.debug('Leaving mortgage calculator')
        return result

    if __name__ == '__main__':
        logging.basicConfig(level=logging.DEBUG)
        payment = get_monthly_payment(100000, 0)
        print('Monthly payment is %f' % payment)
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0].replace('"', "'")
        if placeholder.startswith("logger.exception(") and placeholder.find("'") != -1:
            passed()
        else:
            failed("That is not correct. Be sure to call exception() with a string argument.")


    if __name__ == '__main__':
        run_common_tests()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
